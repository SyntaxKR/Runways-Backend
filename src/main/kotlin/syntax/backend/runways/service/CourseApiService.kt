package syntax.backend.runways.service

import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import syntax.backend.runways.dto.*
import syntax.backend.runways.entity.Course
import syntax.backend.runways.entity.User
import java.util.*

interface CourseApiService {
    fun getMyCourseList(userId: String, pageable: Pageable): Page<ResponseMyCourseDTO>
    fun updateCourse(requestUpdateCourseDTO: RequestUpdateCourseDTO, userId : String) : UUID
    fun getCourseById(courseId: UUID, userId : String): ResponseCourseDetailDTO
    fun deleteCourse(courseId: UUID, userId: String): String
    fun addBookmark(courseId: UUID, userId: String): String
    fun getAllCourses(userId: String, pageable: Pageable): Page<ResponseCourseDTO>
    fun removeBookmark(courseId: UUID, userId: String): String
    fun searchCoursesByTitle(title: String, userId: String, pageable: Pageable): Page<ResponseCourseDTO>
    fun getCourseData(courseId: UUID): Course
    fun createCourse(requestCourseDTO: RequestCourseDTO, userId: String) : UUID
    fun increaseHits(courseId: UUID): String
    fun getRecentCourses(userId: String): ResponseRecommendCourseDTO?
    fun getCourseList(userId:String, pageable: Pageable): Page<ResponseMyCourseDTO>
    fun getPopularCourses(): ResponseRecommendCourseDTO?
    fun getRisingCourse() : ResponseRecommendCourseDTO?
    fun createCourseByLLM(llmRequestDTO: LlmRequestDTO, userId: String): List<AutoGeneratedCourseDTO>
    fun getCombinedRecommendCourses(userId: String): List<ResponseRecommendCourseDTO>
    fun searchCoursesByTag(tagName: String, userId : String, pageable: Pageable): Page<ResponseCourseDTO>
    fun getBookmarkedCourses(userId: String, pageable: Pageable): Page<ResponseMyCourseDTO>
}